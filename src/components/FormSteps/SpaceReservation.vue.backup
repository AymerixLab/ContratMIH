<template>
  <div class="card animate-fade-in">
    <div class="section-header">
      <BuildingStorefrontIcon class="inline w-6 h-6 mr-2" />
      Réservation d'espace
    </div>
    
    <div class="p-6 space-y-6">
      <!-- Equipped Stands -->
      <div>
        <h3 class="text-lg font-medium text-gray-900 mb-4">Stands équipés</h3>
        <p class="text-sm text-gray-600 mb-4">
          Comprend : cloisons, moquette grise, électricité 1kW, éclairage LED, enseigne avec nom de l'entreprise
        </p>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="standEquipeSurface" class="block text-sm font-medium text-gray-700 mb-2">
              Stand équipé - Surface
            </label>
            <Field
              id="standEquipeSurface"
              name="standEquipeSurface"
              as="select"
              class="form-input"
              v-model.number="formData.standEquipeSurface"
            >
              <option value="0">Sélectionner une taille</option>
              <option v-for="size in STAND_EQUIPE_SIZES" :key="size.value" :value="size.value">
                {{ size.label }}
              </option>
            </Field>
          </div>

          <div>
            <label for="standEquipeAngle" class="block text-sm font-medium text-gray-700 mb-2">
              Stand équipé - Angle (maximum 2)
            </label>
            <Field
              id="standEquipeAngle"
              name="standEquipeAngle"
              type="number"
              min="0"
              max="2"
              class="form-input"
              inputmode="numeric"
              v-model.number="formData.standEquipeAngle"
              placeholder="0"
            />
          </div>
        </div>
      </div>

      <!-- Pack Options - Stand Prêt à Exposer -->
      <div class="border-t pt-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Stands prêt à exposer</h3>
        <p class="text-sm text-gray-600 mb-4">
          Stand entièrement aménagé avec mobilier et décoration. Minimum 12 m²
        </p>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div>
            <label for="pack12" class="block text-sm font-medium text-gray-700 mb-2">
              Pack 12 m²
            </label>
          <Field
            id="pack12"
            name="pack12"
            type="number"
            min="0"
            class="form-input"
            inputmode="numeric"
            v-model.number="formData.pack12"
            placeholder="0"
          />
          </div>

          <div>
            <label for="pack15" class="block text-sm font-medium text-gray-700 mb-2">
              Pack 15 m²
            </label>
          <Field
            id="pack15"
            name="pack15"
            type="number"
            min="0"
            class="form-input"
            inputmode="numeric"
            v-model.number="formData.pack15"
            placeholder="0"
          />
          </div>

          <div>
            <label for="pack18" class="block text-sm font-medium text-gray-700 mb-2">
              Pack 18 m²
            </label>
          <Field
            id="pack18"
            name="pack18"
            type="number"
            min="0"
            class="form-input"
            inputmode="numeric"
            v-model.number="formData.pack18"
            placeholder="0"
          />
          </div>

          <div>
            <label for="packAngles" class="block text-sm font-medium text-gray-700 mb-2">
              Pack Angles (maximum 4)
            </label>
          <Field
            id="packAngles"
            name="packAngles"
            type="number"
            min="0"
            max="4"
            class="form-input"
            inputmode="numeric"
            v-model.number="formData.packAngles"
            placeholder="0"
          />
          </div>
        </div>
      </div>

      <!-- Bare Stands -->
      <div class="border-t pt-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Stands nus</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="standNuSurface" class="block text-sm font-medium text-gray-700 mb-2">
              Stand nu - Surface (24-80 m²)
            </label>
          <Field
            id="standNuSurface"
            name="standNuSurface"
            type="number"
            min="24"
            max="80"
            class="form-input"
            :class="{ 'border-red-300': standNuSurfaceError }"
            inputmode="numeric"
            v-model.number="formData.standNuSurface"
            placeholder="24"
          />
          <p v-if="standNuSurfaceError" class="text-red-500 text-sm mt-1">{{ standNuSurfaceError }}</p>
          </div>

          <div>
            <label for="standNuAngle" class="block text-sm font-medium text-gray-700 mb-2">
              Stand nu - Angle (m²)
            </label>
          <Field
            id="standNuAngle"
            name="standNuAngle"
            type="number"
            min="0"
            class="form-input"
            inputmode="numeric"
            v-model.number="formData.standNuAngle"
            placeholder="0"
          />
          </div>
        </div>
      </div>

      <!-- Power -->
      <div class="border-t pt-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Puissance électrique</h3>
        <div class="space-y-3">
          <div 
            v-for="option in POWER_OPTIONS" 
            :key="option.value"
            class="flex items-center"
          >
            <Field
              :id="`power-${option.value}`"
              name="puissance"
              type="radio"
              :value="option.value"
              class="form-radio"
              v-model="formData.puissance"
            />
            <label :for="`power-${option.value}`" class="ml-3 text-sm text-gray-700">
              {{ option.label }}
            </label>
          </div>
        </div>
      </div>

      <!-- Additional Options -->
      <div class="border-t pt-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Options supplémentaires</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="surfaceExterieur" class="block text-sm font-medium text-gray-700 mb-2">
              Surface extérieur (50-80 m²)
            </label>
          <Field
            id="surfaceExterieur"
            name="surfaceExterieur"
            type="number"
            min="50"
            max="80"
            class="form-input"
            :class="{ 'border-red-300': surfaceExterieurError }"
            inputmode="numeric"
            v-model.number="formData.surfaceExterieur"
            placeholder="50"
          />
          <p v-if="surfaceExterieurError" class="text-red-500 text-sm mt-1">{{ surfaceExterieurError }}</p>
          </div>

          <div>
            <label for="cottage" class="block text-sm font-medium text-gray-700 mb-2">
              Garden Cottage {{ requiresCottage ? '(obligatoire)' : '' }}
            </label>
          <Field
            id="cottage"
            name="cottage"
            type="number"
            min="0"
            class="form-input"
            :class="{ 'border-red-300': cottageError }"
            inputmode="numeric"
            v-model.number="formData.cottage"
            placeholder="0"
          />
          <p v-if="cottageError" class="text-red-500 text-sm mt-1">{{ cottageError }}</p>
          </div>
        </div>
        <!-- Moquette Color -->
        <div class="mt-6">
          <label for="moquetteCouleur" class="block text-sm font-medium text-gray-700 mb-2">
            Couleur de moquette
          </label>
          <Field
            id="moquetteCouleur"
            name="moquetteCouleur"
            as="select"
            class="form-input"
            v-model="formData.moquetteCouleur"
          >
            <option value="">Sélectionner une couleur</option>
            <option v-for="color in MOQUETTE_COLORS" :key="color" :value="color">
              {{ color }}
            </option>
          </Field>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed, watch } from 'vue'
import { Field, useForm } from 'vee-validate'
import { BuildingStorefrontIcon } from '@heroicons/vue/24/outline'
import { useFormStore } from '@/stores/form'
import { POWER_OPTIONS, STAND_EQUIPE_SIZES, MOQUETTE_COLORS } from '@/types/form'

const formStore = useFormStore()
const emit = defineEmits<{
  'step-validated': [isValid: boolean]
}>()

const formData = computed(() => formStore.formData.spaceReservation)

// Validation computed properties
const standNuSurfaceError = computed(() => {
  if (formData.value.standNuSurface > 0 && (formData.value.standNuSurface < 24 || formData.value.standNuSurface > 80)) {
    return 'La surface doit être entre 24 et 80 m²'
  }
  return null
})

const surfaceExterieurError = computed(() => {
  if (formData.value.surfaceExterieur > 0 && (formData.value.surfaceExterieur < 50 || formData.value.surfaceExterieur > 80)) {
    return 'La surface extérieure doit être entre 50 et 80 m²'
  }
  return null
})

const requiresCottage = computed(() => {
  return formData.value.surfaceExterieur > 0 && 
    !formData.value.standEquipeSurface && 
    !formData.value.pack12 && 
    !formData.value.pack15 && 
    !formData.value.pack18 && 
    !formData.value.standNuSurface
})

const cottageError = computed(() => {
  if (requiresCottage.value && !formData.value.cottage) {
    return 'Garden Cottage obligatoire si aucun stand intérieur'
  }
  return null
})

const { meta } = useForm({
  initialValues: formData.value
})

watch(meta, (newMeta) => {
  const isValid = !standNuSurfaceError.value && !surfaceExterieurError.value && !cottageError.value
  emit('step-validated', isValid)
}, { immediate: true, deep: true })

// Watch for validation errors
watch([standNuSurfaceError, surfaceExterieurError, cottageError], () => {
  const isValid = !standNuSurfaceError.value && !surfaceExterieurError.value && !cottageError.value
  emit('step-validated', isValid)
})

// v-model writes through computed setter; avoid duplicate updates
</script>
